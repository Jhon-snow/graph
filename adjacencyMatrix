/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class Graph {
    
    private int V;
    private ArrayList<Integer> adj[];
    private int c[][];
    //constructor
    Graph(int n){
        V=n;
        c=new int[V][V];
        adj=new ArrayList[V];
        for(int i=0;i<n;i++)
            adj[i]=new ArrayList<>();
    }
    
    void addEdge(int v,int w){
        adj[v].add(w);
    }
    
  
    
    void dfs(int v,int w){
        c[v][w]=1;//mark node as visited
        for(int a:adj[w]){
            if(c[v][a]==0)
                dfs(v,a);//access all nodes that are accessable from current node
        }
    }
    
   void transistiveclosure(){
       for (int i = 0; i < V; i++) 
            dfs(i, i); 
        for (int i = 0; i < V; i++) 
      System.out.println(Arrays.toString(c[i]));
       
   }
    
    
	public static void main (String[] args) {
		        Graph g = new Graph(4); 
  
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(1, 2); 
        g.addEdge(2, 0); 
        g.addEdge(2, 3); 
        g.addEdge(3, 3); 
        System.out.println("Transitive closure " + 
                "matrix is"); 
  
        g.transistiveclosure(); 
	}
}
