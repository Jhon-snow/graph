/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class Graph {
    
    private int V;
    private LinkedList<Integer> adj[];
    
    Graph(int n){
        V=n;
        adj=new LinkedList[V];
        for(int i=0;i<n;i++)
            adj[i]=new LinkedList<>();
    }
    
    void addEdge(int v,int w){
        adj[v].add(w);
    }
    
    /////////////////////////////////////////////////////////////dfs function 
    void dfs(int v){
        boolean visited[]=new boolean[V];
        dfs(v,visited);
        
    }
    
    void dfs(int v,boolean visited[]){
        visited[v]=true;
        System.out.println(v+" ");
        
        Iterator<Integer> itr=adj[v].listIterator();
        while(itr.hasNext()){
            int n=0;
            n=itr.next();
            if(!visited[n]){
                visited[n]=true;
                dfs(n,visited);
            }
        }
        
    }
    
    /////////////////////////////////////////////////////////////// bfs function
    
    void bfs(int v){
        boolean visited[]=new boolean[V];
        Queue<Integer>queue=new LinkedList<>();
        bfs(v,visited,queue);
        
    }
    void bfs(int v,boolean []visited,Queue<Integer>queue){
        visited[v]=true;
        queue.add(v);
        //System.out.println(v);
      
        while(queue.size()!=0){
            int s=0;
            s = queue.poll(); 
            System.out.print(s+" "); 
            Iterator<Integer>itr=adj[s].listIterator();
            while(itr.hasNext()){
                int n=0;
                n=itr.next();
                if(!visited[n]){
                    visited[n]=true;
                queue.add(n);
                }
            }
        }
    }
    
     ///////////////////////////////////////////////////////////////////////////    
    
	public static void main (String[] args) {
		//System.out.println("GfG!");
		        Graph g = new Graph(4); 
  
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(1, 2); 
        g.addEdge(2, 0); 
        g.addEdge(2, 3); 
        g.addEdge(3, 3); 
 
        System.out.println("Following is Depth First Traversal "+ 
                           "(starting from vertex 2)"); 
  
        g.dfs(2); 
        g.bfs(2);
	}
}
