import java.util.*;
public class Graph {
   
   
   
  static class Node implements Comparator<Node> { 
    public int node; 
    public int cost; 
  
    public Node() 
    { 
    } 
  
    public Node(int node, int cost) 
    { 
        this.node = node; 
        this.cost = cost; 
    } 
  
    @Override
    public int compare(Node node1, Node node2) 
    { 
        // if (node1.cost < node2.cost) 
        //     return -1; 
        // if (node1.cost > node2.cost) 
        //     return 1; 
        // return 0; 
        return node1.cost-node2.cost;
    } 
} 
   
   
   
   
     static int V;
    static boolean visited[];
    static ArrayList<Node>arr[];
   static  int dist[];
    //static int vis[];
    static Set<Integer> settled; 
    static  PriorityQueue<Node> pq; 
    Graph(int n){
        V= n;
        visited=new boolean[V];
        arr=new ArrayList[V];
        dist=new int[V];
         Arrays.fill(dist, Integer.MAX_VALUE);
        for(int i=0;i<V;i++)
        arr[i]=new ArrayList<>();
       // vis=new int[V];
        settled = new HashSet<Integer>(); 
        pq = new PriorityQueue<Node>(V, new Node()); 
      
            
    }
   
   
    static void join(int u,int v,int cost){
        arr[u].add(new Node(v,cost));
        arr[v].add(new Node(u,cost));
    }
    
    
     static public void dijkstra(int src) 
    { 
      
  
  
        // Add source node to the priority queue 
        pq.add(new Node(src, 0)); 
  
        // Distance to the source is 0 
        dist[src] = 0; 
        while (settled.size() != V) { 
  
            // remove the minimum distance node  
            // from the priority queue  
            int u = pq.remove().node; 
  
            // adding the node whose distance is 
            // finalized 
            settled.add(u); 
  
            e_Neighbours(u); 
        } 
    } 
    
    
   static  void e_Neighbours(int u) 
    { 
        int edgeDistance = -1; 
        int newDistance = -1; 
  
        // All the neighbors of v 
        
        
        Iterator <Node>itr=arr[u].listIterator();
                while(itr.hasNext()){
                    Node v = itr.next(); 
  
            // If current node hasn't already been processed 
            if (!settled.contains(v.node)) { 
                edgeDistance = v.cost; 
                newDistance = dist[u] + edgeDistance; 
  
                // If new distance is cheaper in cost 
                if (newDistance < dist[v.node]) 
                    dist[v.node] = newDistance; 
  
                // Add the current node to the queue 
                pq.add(new Node(v.node, dist[v.node])); 
                }
                }
        
       
    } 
   
    public static void main(String args[] ) throws Exception {
       Scanner scan=new Scanner(System.in);
       int t=scan.nextInt();
       while(t-->0){
           int n=scan.nextInt();
           int m=scan.nextInt();
          Graph g=new  Graph(n);
           for(int i=0;i<m;i++){
               int u=scan.nextInt();
               int v=scan.nextInt();
               int value=scan.nextInt();
               join(u,v,value);
           }
                  dijkstra( 0); 
        System.out.println("The shorted path from node :"); 
        for (int i = 0; i < dist.length; i++) 
            System.out.println( dist[i]); 
       }
    }
}
