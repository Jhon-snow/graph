/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class Graph {
    
    private int V;
    private LinkedList<Integer> adj[];
    
    Graph(int n){
        V=n;
        adj=new LinkedList[V];
        for(int i=0;i<n;i++)
            adj[i]=new LinkedList<>();
    }
    
    void addEdge(int v,int w){
        adj[v].add(w);
    }
    
    /////////////////////////////////////////////////////////////dfs function 
    // void dfs(int v,boolean visited[]){
    //     boolean visited[]=visited;
    //     dfs(v,visited);
        
    // }
    
    void dfs(int v,boolean visited[]){
        visited[v]=true;
       // System.out.println(v+" ");
        
        Iterator<Integer> itr=adj[v].listIterator();
        while(itr.hasNext()){
            int n=0;
            n=itr.next();
            if(!visited[n]){
                visited[n]=true;
                dfs(n,visited);
            }
        }
        
    }
    /////////////////////////////////////////////////////////////// bfs function
   int  mothervertex(){
       int v=0;
       boolean visited[]=new boolean[V];
          for (int i = 0; i < V; i++) 
            { 
                if (visited[i] == false) 
                { 
                   dfs(i, visited); 
                    v = i; 
                } 
            }
            
            Arrays.fill(visited,false);
            dfs(v,visited);
            for (int i=0; i<V; i++) 
        if (visited[i] == false) 
            return -1; 
  
    return v; 

   }
    
    
     ///////////////////////////////////////////////////////////////////////////    
    
	public static void main (String[] args) {
		//System.out.println("GfG!");
		        Graph g = new Graph(7); 
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(1, 3); 
    g.addEdge(4, 1); 
    g.addEdge(6, 4); 
    g.addEdge(5, 6); 
    g.addEdge(5, 2); 
    g.addEdge(6, 0); 
 
        System.out.println("Following is Depth First Traversal "+ 
                           "(starting from vertex 2)"); 
  
        //g.dfs(2); 
      //  g.bfs(2);
        System.out.println(g.mothervertex());
	}
}
